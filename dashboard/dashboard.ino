#include <Arduino.h>
#include <U8g2lib.h>

#include <WiFi.h>
#include "ELMduino.h"

#ifdef U8X8_HAVE_HW_SPI
#include <SPI.h>
#endif
#ifdef U8X8_HAVE_HW_I2C
#include <Wire.h>
#endif

#define CHANGE_BUTON_PIN_4 4



U8G2_SSD1306_128X64_NONAME_F_HW_I2C u8g2(U8G2_R0, /* reset=*/ U8X8_PIN_NONE);
// citroen sport logo , 128x64px
const unsigned char epd_bitmap_citroen_sport [] PROGMEM = {
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xef, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0x0f, 0xfc, 0xff, 0xff, 0xbf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0x7f, 0x00, 0xf8, 0xff, 0xff, 0xbf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0x03, 0x00, 0xf8, 0xff, 0xff, 0xbf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0x0f, 0x00, 0x00, 0xf8, 0xff, 0xfd, 0xbf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0x7f, 0xc0, 0x00, 0x00, 0xf8, 0x0f, 0xfc, 0xbf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0x01, 0xe0, 0x03, 0x00, 0xf8, 0x00, 0xfc, 0xbf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0x0e, 0x00, 0xf0, 0x07, 0x00, 0xf8, 0x00, 0xfc, 0xbf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0x06, 0x00, 0xf8, 0x0f, 0x00, 0xf8, 0x00, 0xfc, 0xbf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0x06, 0x00, 0xfc, 0x3f, 0x00, 0xf8, 0x00, 0xfc, 0xbf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0x06, 0x00, 0xfe, 0x7f, 0x00, 0xf8, 0x00, 0x1c, 0xb0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0x06, 0x00, 0x3f, 0xff, 0x01, 0xf8, 0x00, 0x02, 0xb0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0x06, 0x80, 0x1f, 0xf8, 0x03, 0xf8, 0xf8, 0x03, 0xb0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0x06, 0xc0, 0x47, 0xe0, 0x07, 0x18, 0xff, 0x03, 0xb0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0x06, 0xe0, 0xe3, 0x01, 0x1f, 0x00, 0xff, 0x03, 0xb0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0x06, 0xf0, 0xf1, 0x03, 0x3c, 0x00, 0xff, 0x03, 0xb0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0x06, 0xf8, 0xf8, 0x07, 0xe0, 0x00, 0xff, 0x03, 0xb8, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0x06, 0x3c, 0xf8, 0x1f, 0x80, 0x01, 0xff, 0xe3, 0xbf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0x06, 0x1e, 0xfc, 0x3f, 0x00, 0x00, 0x7f, 0xfc, 0xbf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0x06, 0x06, 0xfe, 0xff, 0x00, 0x00, 0x01, 0xfc, 0xbf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0x86, 0x03, 0x3f, 0xfe, 0x01, 0xf0, 0x00, 0xfc, 0xbf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0x86, 0x81, 0x0f, 0xf8, 0x07, 0xf8, 0x00, 0xfc, 0xbf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0x46, 0xc0, 0x07, 0xc0, 0x0f, 0xf8, 0x00, 0xfc, 0xbf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0x26, 0xe0, 0x03, 0x00, 0x1f, 0xf8, 0x00, 0xfc, 0xb0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0x16, 0xf0, 0x00, 0x00, 0x78, 0xf8, 0x00, 0x04, 0xb0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0x06, 0x78, 0x00, 0x00, 0xe0, 0xf8, 0xc0, 0x03, 0xb0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0x06, 0x3c, 0x00, 0x00, 0x00, 0xf9, 0xff, 0x03, 0xb0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0x06, 0x0e, 0x00, 0x00, 0x00, 0x00, 0xff, 0x03, 0xb0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0x06, 0x07, 0x00, 0x00, 0xf0, 0x07, 0xff, 0x03, 0xf0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 
	0x86, 0x03, 0x00, 0x80, 0xff, 0x07, 0xff, 0x03, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 
	0xc6, 0x00, 0x00, 0xfe, 0xf1, 0x03, 0xff, 0x03, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 
	0x66, 0x00, 0xf0, 0x0f, 0x70, 0x00, 0xff, 0xff, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 
	0x36, 0xe0, 0x3f, 0x00, 0x30, 0x00, 0xff, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 
	0x06, 0xff, 0x01, 0x00, 0x30, 0x80, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 
	0xfe, 0x0f, 0x00, 0x00, 0x30, 0xfc, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 
	0xfe, 0x06, 0x00, 0x00, 0xf0, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x0c, 0x00, 0x00, 0x60, 
	0xff, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x1c, 0x00, 0x00, 0x60, 
	0xff, 0x06, 0x80, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x03, 0x60, 0x0c, 0x00, 0x00, 0x60, 
	0xff, 0x06, 0xf8, 0x3f, 0xbc, 0xff, 0xdf, 0xff, 0x0f, 0xfc, 0x1f, 0xfc, 0x7f, 0x7e, 0xf0, 0x61, 
	0xff, 0x06, 0xfc, 0xff, 0xbc, 0xff, 0xdf, 0xff, 0x1f, 0xfe, 0x7f, 0xfc, 0x7f, 0xfe, 0xf0, 0x61, 
	0xff, 0x06, 0xfe, 0xfe, 0xbc, 0xff, 0xdf, 0xff, 0x3f, 0xff, 0xff, 0xfc, 0x7f, 0xfe, 0xf0, 0x61, 
	0xff, 0x06, 0x1f, 0x70, 0x3c, 0xf0, 0xc0, 0x07, 0xbc, 0x0f, 0xf8, 0x3c, 0x00, 0xfe, 0xf1, 0x61, 
	0xff, 0x06, 0x0f, 0x00, 0x3c, 0xf0, 0xc0, 0x07, 0xfe, 0x07, 0xf0, 0xfd, 0x3f, 0xfe, 0xf3, 0x61, 
	0xff, 0x06, 0x0f, 0x00, 0x3c, 0xf0, 0xc0, 0xff, 0xff, 0x07, 0xe0, 0xfd, 0x3f, 0xde, 0xf7, 0x61, 
	0xff, 0x06, 0x0f, 0x00, 0x3c, 0xf0, 0xc0, 0xff, 0xdf, 0x07, 0xf0, 0xfd, 0x3f, 0x9e, 0xff, 0x61, 
	0xff, 0x06, 0x1f, 0x20, 0x3c, 0xf0, 0xc0, 0xff, 0x87, 0x0f, 0xf0, 0x3d, 0x00, 0x1e, 0xff, 0x61, 
	0xff, 0x06, 0x7e, 0xf8, 0x3c, 0xf0, 0xc0, 0x87, 0x8f, 0x1f, 0xfc, 0x3c, 0x00, 0x1e, 0xfe, 0x61, 
	0xff, 0x06, 0xfc, 0xff, 0x3c, 0xf0, 0xc0, 0x07, 0x1f, 0xff, 0x7f, 0xfc, 0x7f, 0x1e, 0xfc, 0x61, 
	0xff, 0x06, 0xf8, 0x3f, 0x3c, 0xf0, 0xc0, 0x07, 0x3e, 0xfc, 0x3f, 0xfc, 0x7f, 0x1e, 0xf8, 0x61, 
	0xff, 0x06, 0xc0, 0x0f, 0x1c, 0xf0, 0x80, 0x03, 0x3c, 0xf0, 0x07, 0xfc, 0x7f, 0x1c, 0xf0, 0x60, 
	0xff, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 
	0xff, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 
	0xff, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 
	0xff, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 
	0xff, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 
	0xff, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbf, 0x3f, 0x7e, 0xfc, 0xfd, 0x61, 
	0xff, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xc7, 0xbf, 0xff, 0xfe, 0xfd, 0x60, 
	0xff, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xcf, 0xdf, 0x71, 0xfe, 0x38, 0x60, 
	0xff, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xef, 0xc7, 0x79, 0x7f, 0x1c, 0x60, 
	0xff, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xf7, 0xc0, 0x9f, 0x7f, 0x1e, 0x60, 
	0xff, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x71, 0x80, 0x87, 0x73, 0x0e, 0x60, 
	0xff, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 
	0xff, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f
};

// Array of all bitmaps for convenience. (Total bytes used to store images in PROGMEM = 1040)
const int epd_bitmap_allArray_LEN = 1;
const unsigned char* epd_bitmap_allArray[1] = {
	epd_bitmap_citroen_sport
};


#define CHANGE_BUTON_PIN_4 4

int button_select_clicked = 0; //only perform action when button is clicked, and wait until another press
int current_screen = 0; // 0 = menu, 1 = screenshot, 2 = qr

const char* ssid = "WiFi_OBDII";

//IP Adress of your ELM327 Dongle
IPAddress server(192, 168, 0, 10);
WiFiClient client;
ELM327 myELM327;

uint32_t rpm = 0;



void setup(void) {
  u8g2.begin();
  u8g2.setColorIndex(1);  // set the color to white

  // define pins for buttons
  // INPUT_PULLUP means the button is HIGH when not pressed, and LOW when pressed
  // since itÂ´s connected between some pin and GND
  
  pinMode(CHANGE_BUTON_PIN_4, INPUT_PULLUP); // select button

  // Serial.begin(115200);

  // // Connecting to ELM327 WiFi
  // Serial.print("Connecting to ");
  // Serial.println(ssid);

  // WiFi.mode(WIFI_AP);
  // WiFi.begin(ssid);
  // // WiFi.begin(ssid, password); //Use this line if your ELM327 has a password protected WiFi

  // while (WiFi.status() != WL_CONNECTED)
  // {
  //   delay(500);
  //   Serial.print(".");
  // }

  // Serial.println("");
  // Serial.println("Connected to Wifi");
  // Serial.println("IP address: ");
  // Serial.println(WiFi.localIP());

  // if (client.connect(server, 35000))
  //   Serial.println("connected");
  // else
  // {
  //   Serial.println("connection failed");
  //   while(1);
  // }

  // myELM327.begin(client, true, 2000);
  
}

void loop(void) {
  

  u8g2.clearBuffer();					// clear the internal memory
  u8g2.setFont(u8g2_font_ncenB08_tr);	// choose a suitable font
  			// transfer internal memory to the display
  

  pinMode(CHANGE_BUTON_PIN_4, INPUT_PULLUP);

  if ((digitalRead(CHANGE_BUTON_PIN_4) == LOW) && (button_select_clicked == 0)) { // select button clicked, jump between screens
     button_select_clicked = 1; // set button to clicked to only perform the action once
     if (current_screen == 0) {current_screen = 1;} // menu items screen --> screenshots screen
     else if (current_screen == 1) {current_screen = 2;} // screenshots screen --> qr codes screen
     else {current_screen = 0;} // qr codes screen --> menu items screen
  }
  if ((digitalRead(CHANGE_BUTON_PIN_4) == HIGH) && (button_select_clicked == 1)) { // unclick 
    button_select_clicked = 0;
  }

  // float tempRPM = myELM327.rpm();

  // if (myELM327.nb_rx_state == ELM_SUCCESS)
  // {
  //   rpm = (uint32_t)tempRPM;
  //   Serial.print("RPM: "); Serial.println(rpm);
  // }
  // else if (myELM327.nb_rx_state != ELM_GETTING_MSG)
  //   myELM327.printError();

  u8g2.firstPage(); // required for page drawing mode for u8g library
  do {

  if (current_screen == 0) { // MENU SCREEN

    u8g2.drawXBMP(0, 0, 128, 64, epd_bitmap_citroen_sport);

  } 
  else if (current_screen == 1) { // SCREENSHOTS SCREEN
    u8g2.drawStr(0, 15, "RPM:");
  }
  else if (current_screen == 2) { // SCREENSHOTS SCREEN
    u8g2.drawStr(0, 15, "Voltage:");
  }
     

  } while ( u8g2.nextPage() ); // required for page drawing mode with u8g library

  u8g2.sendBuffer();		
  
}
    
  


